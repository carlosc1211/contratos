/*!
 * Ext JS Library 3.2.1
 * Copyright(c) 2006-2010 Ext JS, Inc.
 * licensing@extjs.com
 * http://www.extjs.com/license
 */
// 
// name: refreshCombo
// @param id del combo
// @return id del combo


var fm = Ext.form;


var formatoFecha = Ext.util.Format.dateRenderer('d-m-Y');
var co_agenda=0;
var k=0;
var valor_viejo=0;
var valor_buscar=0;

Ext.apply(Ext.form.VTypes,{
	numero_agenda: function(value,field){
		return value.replace(/[ \-\(\)]/g,'').length == 7;
	},  
 numero_agendaText: 'N&uacute;mero de Agenda incorrecto, por favor aseg&uacute;rese de que contenga 7 d&iacute;gitos',  
 numero_agendaMask: /[ \d\-]/
});

var reader = new Ext.data.JsonReader({
     //totalreader: 'total',
    //successProperty: 'success',
    idProperty: 'co_agenda',
    root: 'results'
},	[
	{name: 'co_agenda'},
    {name: 'nu_agenda'},
    {name: 'co_comision'},
    {name: 'co_tipo_reunion'},
	{name: 'co_trimestre'},
    {name: 'fe_agenda'}
]);


var writer = new Ext.data.JsonWriter({});
var store_agenda = new Ext.data.JsonStore({  
     id:'store_agenda',
	 url: 'php/AgendaInterfaz.php', 
	 writer: writer,
	 //reader:reader,
	 batch:false,
	 autoSave:false, //se modifico autoSave:true, por  autoSave: false, y en var editor_grid_agenda = new Ext.ux.grid.RowEditor
	 //restful:true,
	 totalProperty:'total',
	 root: 'Resultados',
	 //pruneModifiedRecords:true,
	 idProperty: 'co_agenda',
	 fields: [
           {name: 'co_agenda',type:'integer'},           
           
           {name: 'nu_agenda',type:'string'},
           {name: 'co_comision',type:'integer'},
           {name: 'tx_comision',type:'string'},
           {name: 'co_tipo_reunion',type:'integer'},
           {name: 'tx_tipo_reunion',type:'string'},
           {name: 'co_trimestre',type:'integer'},
           {name: 'tx_trimestre',type:'string'},
           {name: 'fe_agenda', type: 'date',dateFormat: 'Y-m-d'}
           ],
     baseParams: { 
		start:0,limit:20,sort:'',dir:'',
		filter:'',
		accion:'refrescar',
		tx_indicador:Usuario.usuario//'suniagar'//<?php                 ?>
	},
	listeners: {
        update : function(store, record,operation) {   // function actualizar ///////////////////////////////////////  update
			//alert(operation);
			if(operation=='edit'){
				
			//store_agenda.commitChanges(); 
			}
        },
		remove : function(store, record,index) {
			store.reload({params:{co_agenda:record.get('co_agenda')}});
        }
    }

});
//store_agenda.load();

var store_proceso_agenda = new Ext.data.JsonStore({ 
	url: 'php/Proceso_Agenda_Interfaz.php',
	totalProperty:'total',
	root: 'Resultados',
	idProperty: 'co_proceso',
	fields: [
           {name: 'co_proceso',type:'integer'}, 
           {name: 'nu_expediente',type:'string'},
           {name: 'nu_orden',type:'integer'},
           {name: 'tx_nu_orden',type:'string'},
           {name: 'tx_descripcion',type:'string'}
           ],
           baseParams: { 
		start:0,limit:20,sort:'',dir:'',
		filter:'',
		accion:'refrescar'
	},
	listeners: {
        update : function(store, record,operation) {   // function actualizar ///////////////////////////////////////  update
			//alert(operation);
			if(operation=='edit'){
				
			//store_agenda.commitChanges(); 
			}
        },
		remove : function(store, record,index) {
			store.reload({params:{co_agenda:record.get('co_agenda')}});
        }
    }
        });
store_proceso_agenda.load();



var nu_expediente = new Ext.form.TextField({
	enableKeyEvents:true,
	//maskRe:/[a-z_]/i,
	listeners:{
		 change:{
			fn: function(field,e){
				field.setValue(field.getValue().toUpperCase());
				Ext.Ajax.request({
					url: 'php/Proceso_Agenda_Interfaz.php',
					params:{
						accion:'BuscarDescripcion',
						filter:'',
						nu_expediente:field.getValue()
					},
					success: function(response,options){
						obj = Ext.util.JSON.decode(response.responseText);
						if(obj.Resultados.tx_descripcion){
							store_proceso_agenda.getAt(0).set('tx_descripcion',obj.Resultados.tx_descripcion);
						}
						else{
							Ext.MessageBox.confirm("[SIPROCON]","Desea agregar", function(btn){
								if (btn == 'yes'){
                                WinProceso.show();
							   
								}
							});
						}	
					}									
				});
			}
		}
	}
});                     
 
  // COMBO COMISION
var comboComision = new Ext.form.ComboBox({
        store: new Ext.data.JsonStore({
			url: 'php/CombosDinamicos.php',
			root: 'Resultados',
			idProperty: 'co_comision',
			baseParams: {accion:"comision"},
			fields:['co_comision','tx_comision']
		}),
		id:'co_comision',
		name:'co_comision',
		displayField:'tx_comision',
        typeAhead: true,
        allowBlank: false,
        mode: 'remote',
        forceSelection: true,
        triggerAction: 'all',
        emptyText:'Selecione..',
        selectOnFocus:true,
        listeners:{/*Cambiamos el valor de co_comision en store_agenda*/                              
			select: function(combo,record,index){
				fila = grid_agenda.getSelectionModel();
				celda = fila.getSelectedCell();
				grid_agenda.store.getAt(celda[0]).set('co_comision',record.data.co_comision);
			}
		}

        //applyTo: 'local-states'
    });
    // COMBO TIPO_REUNION
var comboTipoReunion = new Ext.form.ComboBox({
        store: new Ext.data.JsonStore({
			url: 'php/CombosDinamicos.php',
			root: 'Resultados',
			idProperty: 'co_tipo_reunion',
			baseParams: {accion:'tipo_reunion'},
			fields:['co_tipo_reunion','tx_tipo_reunion']
		}),
        displayField:'tx_tipo_reunion',
        typeAhead: true,
        allowBlank: false,
        mode: 'remote',
        forceSelection: true,
        triggerAction: 'all',
        emptyText:'Selecione',
        selectOnFocus:true,
        listeners:{
			select: function(combo,record,index){
				fila = grid_agenda.getSelectionModel();
				celda = fila.getSelectedCell();
				grid_agenda.store.getAt(celda[0]).set('co_tipo_reunion',record.data.co_tipo_reunion);
			}
		}
	});
	
	// COMBO TRIMESTRE
var comboTrimestre = new Ext.form.ComboBox({
       		store: new Ext.data.JsonStore({
			url: 'php/CombosDinamicos.php',
			root: 'Resultados',
			idProperty: 'co_trimestre',
			baseParams: {accion:'trimestre'},
			fields:['co_trimestre','tx_trimestre']
		}),
        displayField:'tx_trimestre',
        typeAhead: true,
        allowBlank: false,
        mode: 'remote',
        forceSelection: true,
        triggerAction: 'all',
        emptyText:'Selecione',
        selectOnFocus:true,
        listeners:{
			select: function(combo,record,index){
				fila = grid_agenda.getSelectionModel();
				celda = fila.getSelectedCell();
				grid_agenda.store.getAt(celda[0]).set('co_trimestre',record.data.co_trimestre)
			
			}
		}
       //applyTo: 'local-states'
    });
         // COMBO NUMERO DE ORDEN
    var comboNumerodeorden = new Ext.form.ComboBox({
       		store: new Ext.data.JsonStore({
			url: 'php/CombosDinamicos.php',
			root: 'Resultados',
			idProperty: 'nu_orden',
			baseParams: {accion:'Numerodeorden'},
			fields:['nu_orden','tx_nu_orden']
		}),
        displayField:'tx_nu_orden',
        typeAhead: true,
        allowBlank: false,
        mode: 'remote',
        forceSelection: true,
        triggerAction: 'all',
        emptyText:'Selecione',
        selectOnFocus:true,
        listeners:{
			select: function(combo,record,index){
				//k=0;
				fila = grid_proceso_agenda.getSelectionModel();
				celda = fila.getSelectedCell();
				grid_proceso_agenda.store.getAt(celda[0]).set('nu_orden',record.data.nu_orden);
			
			for (i=0;i<store_proceso_agenda.getCount();i++) {
				
				//alert(store_proceso_agenda.getAt(i).get('nu_expediente'));
//console.log(valor_viejo+'|'+store_proceso_agenda.getAt(i).get('nu_orden')+'|'+store_proceso_agenda.getAt(k).get('nu_orden')+'|'+k+'|'+i);
					
					if((store_proceso_agenda.getAt(i).get('nu_orden')==store_proceso_agenda.getAt(k).get('nu_orden')) && k!=i){	
					
						temporal=valor_viejo;
						
						store_proceso_agenda.getAt(k).set('nu_orden',store_proceso_agenda.getAt(i).get('nu_orden'));
						
						
						store_proceso_agenda.getAt(i).set('nu_orden',temporal);
						//alert('cambiado '+store_proceso_agenda.getAt(i).get('nu_orden')+' '+i);
					}
					
				}
				
			}
		}
    });
    
//fila.commit();
// grid  agenda
var grid_agenda = new Ext.grid.EditorGridPanel({
		id:'grid_agenda', //identificacion del var grid_agenda = new Ext.grid.EditorGridPanel
		name:'grid_agenda',
        store: store_agenda,
        //writer:writer,
        //width: 1100,
        anchor:'100%',
        height: 350,
        region:'center',
        margins: '0 5 5 5',
        tbar: [{
            iconCls: 'agenda-add',
            text: 'Nueva Agenda', // boton Agregar Agenda
            handler: function(){
				for(i in Ext.getCmp('grouptabpanel').events)
		        //	alert(i);
				//store_agenda.setBaseParam('accion','insertar');
                var record = new grid_agenda.store.recordType();
				//editor_grid_agenda.stopEditing();       // permite ser mas rapida la busqueda de la funcionalidad del recordType
				grid_agenda.store.insert(0, record);   // permite posicionarse en la fila correspondiente
				grid_agenda.getView().getRowClass=function (record,index,rowParams,store){
					if(index==0)
						return 'red-row';
					else
						return '';
				}
				//editor_grid_agenda.startEditing(0);   // permite editar el recordType en la posiciÃ³n que se le asigne.
            }
        },{
			iconCls: 'guardar',
			text: 'Guardar',
			handler: function(){
				
				 Ext.MessageBox.confirm("[SIPROCON]","Guardar ?", function(btn){
					if(btn == 'yes'){
				records_modificados=store_agenda.getModifiedRecords();
				
					Ext.each(records_modificados,function(fila,i){
						
						if(fila.data.nu_agenda==undefined || fila.data.co_comision==undefined  || fila.data.co_tipo_reunion==undefined || fila.data.co_trimestre==undefined || fila.data.fe_agenda==undefined )
						{
						WinError("Debe completar toda la informaci&oacute;n");
						
					}
						else
						{
						if(fila.data.co_agenda==null )
							accion='insertar';
						else
							accion='modificar';
						store_agenda.reload({
							
							params:{
								
								accion:accion,
							    tx_indicador:Ext.getCmp('tx_usuario').getValue(),
								condicion:fila.data.co_agenda,
								filter:'',
								Resultados:Ext.util.JSON.encode(fila.getChanges())
							} 
						});
						fila.commit();
						grid_agenda.getView().getRowClass=function (record,index,rowParams,store){
							return '';
						}       
					  }         
								
					});
					}
				});
			}
		},{
      iconCls: 'agenda-delete',
            text: 'Eliminar',                         // boton Eliminar Agenda
            //disabled: true,
            handler: function(){
				Ext.MessageBox.confirm("[SIPROCON]","Desea Eliminar la Agenda ?", function(btn){
					if(btn == 'yes'){
               // editor.stopEditing();                    // no deja ningÃºn tipo de ediciÃ³n activos
                fila = grid_agenda.getSelectionModel(); // seleciona la fila del grid_agenda
                celda = fila.getSelectedCell();        // seleciona la celda del grid_agenda
                grid_agenda.store.reload({            // manda a recargar el store_agenda 
					params:{
						tx_indicador:Ext.getCmp('tx_usuario').getValue(),
						co_agenda:grid_agenda.store.getAt(celda[0]).get('co_agenda'),//  elimina y se ubica en la celda 0
						accion:'eliminar'
					}
				});
				   grid_proceso_agenda.store.removeAll(); // va buscando paso a paso para eliminar los registros de Proceso Agenda y Agenda,buscar en el archivo Agenda clase
				 }
			});
            }
        }],
      
// Columnas del grid_agenda
        columns: [
        new Ext.grid.RowNumberer(),
        {
            header: 'N&uacute;mero Agenda', // encabezamiento del campo del grid_agenda
            dataIndex: 'nu_agenda',
			width: 100,
            sortable: true,
            editor: new Ext.form.TextField({allowBlank: false,vtype: 'numero_agenda',maxlength:7,minlength:7})
        },{
            header: 'Comisi&oacute;n',
            dataIndex: 'tx_comision', // selecciona o conecta un campo del store  agenda 
            width: 150,
            editor:comboComision
        },{
            header: 'Tipo de Reuni&oacute;n',
            dataIndex: 'tx_tipo_reunion',
            width: 100,
            sortable: true,
            editor:comboTipoReunion
        },{
           header: 'Trimestre',
            dataIndex: 'tx_trimestre',
            width: 70,
            sortable: true,
            editor: comboTrimestre
                      
        },{
			xtype:'datecolumn',
                header: 'Fecha de Agenda',
                dataIndex: 'fe_agenda',
                width: 110,
                format: 'd/m/Y',
                //renderer: formatoFecha,
                editor: {
					xtype: 'datefield',
                    format: 'd/m/Y',
                    //minValue: '01-01-06',
                    //disabledDays: [0, 6],
                    disabledDaysText: 'Plants are not available on the weekends'/*,
                    listeners:{
					select : function( date ) {alert('select '+ date);}
					
					}
                    */
                }
            }/*{
            xtype: 'datecolumn',
            header: 'Fecha de Agenda',
            dataIndex: 'fe_agenda',
            name: 'fe_agenda',
           format: 'Y-m-d',
            width: 150,
            //renderer:Ext.util.Format.dateRenderer('Y-m-d'),
            sortable: true,
            //groupRenderer: Ext.util.Format.dateRenderer('M y'),
            //editor: {                xtype: 'datefield',                format: 'Y-m-d',                allowBlank: false             }
           
        }*/],
        
     listeners: {
     rowclick:function(grid_agenda, rowIndex, e) {
		//alert(grid_agenda.store.getAt(rowIndex).get('co_agenda'));
		accion='refrescar';
		co_agenda=grid_agenda.store.getAt(rowIndex).get('co_agenda');
		Ext.getCmp('grid_Proceso agenda').store.load({
			params:{
				accion:accion,
				condicion:co_agenda,
				filter:'',
								//Resultados:Ext.util.JSON.encode(fila.getChanges())
			}
		});
						//store_proceso_agenda.load();
						//store_proceso_agenda.commitChanges();
       //alert(Ext.getCmp('grid_proceso_agenda').getColumnModel().getColumnHeader(3));
      //alert(rowIndex);
    }
  }

				
    });  
 var grid_proceso_agenda = new Ext.grid.EditorGridPanel({  // grid_proceso_agenda
        id:'grid_Proceso agenda',
        store: store_proceso_agenda,
		//title:'Proceso_agenda',
		autoExpandColumn:'tx_descripcion',
        //width: 1100,
        anchor:'100%',
        height: 350,
        region:'center',
        margins: '0 5 5 5',
      
        tbar: [{
            iconCls: 'agenda-add',
            text: 'Agregar Caso', // boton Nuevo Sequimiento
            handler: function(){
				//store_agenda.setBaseParam('accion','insertar');
                var record = new grid_proceso_agenda.store.recordType();
				//editor_grid_agenda.stopEditing();       // permite ser mas rapida la busqueda de la funcionalidad del recordType
				grid_proceso_agenda.store.insert(0, record);   // permite posicionarse en la fila correspondiente
				mayor=0;                                                  
				for(i=0;i<store_proceso_agenda.getCount();i++){           
					if(store_proceso_agenda.getAt(i).data.nu_orden>mayor)
						mayor=store_proceso_agenda.getAt(i).data.nu_orden;  
				}
				store_proceso_agenda.getAt(0).set('nu_orden',mayor+1);
				grid_proceso_agenda.getView().getRowClass=function (record,index,rowParams,store){
					if(index==0)
						return 'red-row';
					else
						return '';
				}
				//editor_grid_agenda.startEditing(0);   // permite editar el recordType en la posiciÃ³n que se le asigne.
            }
        },{
			iconCls: 'guardar',
			text: 'Guardar ',
			handler: function(){
		        Ext.MessageBox.confirm("[SIPROCON]","Guardar Registro ?", function(btn){
					if(btn == 'yes'){
				
				records_modificados=store_proceso_agenda.getModifiedRecords();
				
					Ext.each(records_modificados,function(fila,i){
					//alert(fila.data.nu_expediente);
						if(fila.data.nu_expediente==undefined || fila.data.nu_orden==undefined  || fila.data.tx_descripcion==undefined)
						{
						WinError("Debe completar toda la informaci&oacute;n");
						
					    }
						else
						{
						if(fila.data.co_proceso==null)
							accion='insertar';
						else
						{
							accion='modificar';
							//alert(records_modificados[1].data.nu_orden+ ' '+records_modificados[0].data.nu_orden+ ' '+i);
						}
						store_proceso_agenda.reload({
							
							params:{
								accion:accion,
								co_agenda:co_agenda,
								co_proceso:fila.data.co_proceso,
								filter:'',
								Resultados:Ext.util.JSON.encode(fila.getChanges())
							}
						});
						//fila.commit();
						grid_proceso_agenda.getView().getRowClass=function (record,index,rowParams,store){
							
							return '';
						}
					  }
					});
					store_proceso_agenda.commitChanges();  //Confirmar todos los registros con cambios pendientes
					store_proceso_agenda.reload();
					}
					
			     });
			
			}
		},{
      iconCls: 'agenda-delete',
            text: 'Eliminar',                  // boton Eliminar Seguimiento
            //disabled: true,
            handler: function(){
				Ext.MessageBox.confirm("[SIPROCON]","Desea Eliminar Registro ?", function(btn){
					if(btn == 'yes'){
               // editor.stopEditing();                    // no deja ningÃºn tipo de ediciÃ³n activos
                fila = grid_proceso_agenda.getSelectionModel(); // seleciona la fila del grid_agenda
                celda = fila.getSelectedCell();        // seleciona la celda del grid_agenda
                grid_proceso_agenda.store.reload({            // manda a recargar el store_agenda 
					params:{
						co_agenda:co_agenda,
						co_proceso:grid_proceso_agenda.store.getAt(celda[0]).get('co_proceso'),//  elimina y se ubica en la celda 0
						accion:'eliminar'
					}
				});
			   }
			});
            }
        }],

        columns: [                     // Columnas del grid_proceso_agenda
        new Ext.grid.RowNumberer(),
        {
            header: 'N&uacute;mero de Expediente',
            dataIndex: 'nu_expediente',
            width: 130,
            sortable: true,
            //disabled: true,
            editor:nu_expediente
       },{
            header: 'N&uacute;mero de Orden',
            dataIndex: 'nu_orden',
            width: 100,
            sortable: true,
            editor: comboNumerodeorden
        },{
			id:'tx_descripcion',
            header: 'Descripci&oacute;n',
            dataIndex: 'tx_descripcion',
            sortable: true,
            //disabled: true,
            //editor: new Ext.form.TextField({})
                      
        }],
        listeners: {
			 beforeedit:function(e) {
				k=e.row;
				valor_viejo=e.value;
				
			}
		  }
	 });
  
